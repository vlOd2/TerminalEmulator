<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TerminalEmulator</name>
    </assembly>
    <members>
        <member name="T:TerminalEmulator.Classes.Plugin">
            <summary>
            A wrapped IPlugin class, great for beginners
            </summary>
        </member>
        <member name="P:TerminalEmulator.Classes.Plugin.pAN">
            <summary>
            DO NOT CHANGE THIS
            </summary>
        </member>
        <member name="P:TerminalEmulator.Classes.Plugin.pluginName">
            <summary>
            The plugin's name
            </summary>
        </member>
        <member name="P:TerminalEmulator.Classes.Plugin.pluginVersion">
            <summary>
            The plugin's version
            </summary>
        </member>
        <member name="P:TerminalEmulator.Classes.Plugin.theProgram">
            <summary>
            The program instance the plugin is running on
            </summary>
        </member>
        <member name="M:TerminalEmulator.Classes.Plugin.onEnable">
            <summary>
            Function called when the plugin is enabled
            </summary>
        </member>
        <member name="M:TerminalEmulator.Classes.Plugin.onDisable">
            <summary>
            Function called when the plugin is disabled
            </summary>
        </member>
        <member name="M:TerminalEmulator.Classes.Plugin.onExecute(System.String,System.String[],System.Boolean)">
            <summary>
            Function called when an registered command is executed
            </summary>
            <param name="cmdName">Executed command's name</param>
            <param name="cmdArgs">Executed command's arguments</param>
            <param name="anyArgs">If there are any arguments</param>
        </member>
        <member name="M:TerminalEmulator.Classes.Plugin.onHelp">
            <summary>
            Function called when the "help" command is executed<para/>
            Example usage: Console.WriteLine("example - Command used to show an example message");
            </summary>
        </member>
        <member name="T:TerminalEmulator.Interfaces.IPlugin">
            <summary>
            A simple plugin interface
            </summary>
        </member>
        <member name="P:TerminalEmulator.Interfaces.IPlugin.pAN">
            <summary>
            DO NOT CHANGE THIS
            </summary>
        </member>
        <member name="P:TerminalEmulator.Interfaces.IPlugin.pluginName">
            <summary>
            The plugin's name
            </summary>
        </member>
        <member name="P:TerminalEmulator.Interfaces.IPlugin.pluginVersion">
            <summary>
            The plugin's version
            </summary>
        </member>
        <member name="P:TerminalEmulator.Interfaces.IPlugin.theProgram">
            <summary>
            The program instance the plugin is running on
            </summary>
        </member>
        <member name="M:TerminalEmulator.Interfaces.IPlugin.onEnable">
            <summary>
            Function called when the plugin is enabled
            </summary>
        </member>
        <member name="M:TerminalEmulator.Interfaces.IPlugin.onDisable">
            <summary>
            Function called when the plugin is disabled
            </summary>
        </member>
        <member name="M:TerminalEmulator.Interfaces.IPlugin.onExecute(System.String,System.String[],System.Boolean)">
            <summary>
            Function called when an registered command is executed
            </summary>
            <param name="cmdName">Executed command's name</param>
            <param name="cmdArgs">Executed command's arguments</param>
            <param name="anyArgs">If there are any arguments</param>
        </member>
        <member name="M:TerminalEmulator.Interfaces.IPlugin.onHelp">
            <summary>
            Function called when the "help" command is executed<para/>
            Example usage: Console.WriteLine("example - Command used to show an example message");
            </summary>
        </member>
        <member name="F:TerminalEmulator.CommandExecuter.systemCommands">
            <summary>
            The registered system commands (Cannot be registered)
            </summary>
        </member>
        <member name="F:TerminalEmulator.CommandExecuter.cLogger">
            <summary>
            The terminal logger, used for logs
            </summary>
        </member>
        <member name="F:TerminalEmulator.CommandExecuter.registeredCommands">
            <summary>
            The registered commands
            </summary>
        </member>
        <member name="F:TerminalEmulator.CommandExecuter.commandsEnabled">
            <summary>
            Bool that allows commands to be executed
            </summary>
        </member>
        <member name="M:TerminalEmulator.CommandExecuter.#ctor(TerminalEmulator.Logger)">
            <summary>
            A class used to handle commands
            </summary>
        </member>
        <member name="M:TerminalEmulator.CommandExecuter.registerCommand(System.String,TerminalEmulator.Interfaces.IPlugin)">
            <summary>
            Register a new command from a plugin
            </summary>
            <param name="cmdName">Command name</param>
            <param name="cmdPlugin">Command plugin</param>
        </member>
        <member name="M:TerminalEmulator.CommandExecuter.unregisterCommand(System.String)">
            <summary>
            Unregister an existing command
            </summary>
            <param name="cmdName">Command name</param>
        </member>
        <member name="M:TerminalEmulator.CommandExecuter.executeCommand(System.String)">
            <summary>
            Execute a command
            </summary>
            <param name="rawUserInput">Raw user input</param>
            <returns>Command result</returns>
        </member>
        <member name="M:TerminalEmulator.CommandExecuter.executeSystemCommand(System.String)">
            <summary>
            Execute a system command
            </summary>
            <param name="systemCommand">System command</param>
        </member>
        <member name="T:TerminalEmulator.Level">
            <summary>
            Enum used to specify the logger level
            </summary>
        </member>
        <member name="F:TerminalEmulator.Logger.defaultLevel">
            <summary>
            Default logger level
            </summary>
        </member>
        <member name="F:TerminalEmulator.Logger.loggedMessages">
            <summary>
            Get all of the logged messages
            </summary>
        </member>
        <member name="M:TerminalEmulator.Logger.#ctor(TerminalEmulator.Level)">
            <summary>
            A class used to log to the console
            </summary>
            <param name="defaultLevel">Default level</param>
        </member>
        <member name="M:TerminalEmulator.Logger.Log(System.String)">
            <summary>
            Log to the console with the default level
            </summary>
            <param name="logMessage">Log message</param>
        </member>
        <member name="M:TerminalEmulator.Logger.Log(TerminalEmulator.Level,System.String)">
            <summary>
            Log to the console with a choosen level
            </summary>
            <param name="logLevel">Log level</param>
            <param name="logMessage">Log message</param>
        </member>
        <member name="F:TerminalEmulator.PluginManager.pluginsDir">
            <summary>
            The plugins directory
            </summary>
        </member>
        <member name="F:TerminalEmulator.PluginManager.loadedPlugins">
            <summary>
            The loaded plugins
            </summary>
        </member>
        <member name="M:TerminalEmulator.PluginManager.#ctor(System.String)">
            <summary>
            A class used to manage plugins
            </summary>
            <param name="pluginsDir"></param>
        </member>
        <member name="M:TerminalEmulator.PluginManager.loadPlugin(System.String)">
            <summary>
            Load the plugin with the specified name and return it (or null)
            </summary>
            <param name="pluginName">Plugin name</param>
            <returns>The loaded plugin or null</returns>
        </member>
        <member name="M:TerminalEmulator.PluginManager.getPlugin(System.String,System.Boolean)">
            <summary>
            Get the loaded plugin with the specified name (or null)
            </summary>
            <param name="pluginName">Plugin name</param>
            <param name="isAssemblyName">If the plugin name is the assembly name</param>
            <returns>The plugin or null</returns>
        </member>
        <member name="M:TerminalEmulator.PluginManager.unloadPlugin(TerminalEmulator.Interfaces.IPlugin)">
            <summary>
            Unload the plugin with the specified name
            </summary>
            <param name="targetedPlugin">Plugin name</param>
        </member>
        <member name="M:TerminalEmulator.PluginManager.loadPlugins">
            <summary>
            Load all the plugins in the specified directory
            </summary>
        </member>
        <member name="M:TerminalEmulator.PluginManager.unloadPlugins">
            <summary>
            Unload all the loaded plugins
            </summary>
        </member>
        <member name="F:TerminalEmulator.Program.thisProgram">
            <summary>
            The current instance of the program
            </summary>
        </member>
        <member name="M:TerminalEmulator.Program.Main(System.String[])">
            <summary>
            The entry point of the program
            </summary>
            <param name="args">Program args</param>
        </member>
        <member name="F:TerminalEmulator.Program.terminalSymbol">
            <summary>
            The terminal input symbol
            </summary>
        </member>
        <member name="F:TerminalEmulator.Program.cLogger">
            <summary>
            The terminal logger, used for logs
            </summary>
        </member>
        <member name="F:TerminalEmulator.Program.pluginManager">
            <summary>
            The plugin manager for the plugins
            </summary>
        </member>
        <member name="F:TerminalEmulator.Program.cmdExecuter">
            <summary>
            The command executer
            </summary>
        </member>
        <member name="F:TerminalEmulator.Program.isRunning">
            <summary>
            This bool determines if the program loop should be running
            </summary>
        </member>
        <member name="M:TerminalEmulator.Program.writeInfo">
            <summary>
            Displays program information
            </summary>
        </member>
        <member name="M:TerminalEmulator.Program.handleError(System.String,System.String,System.Exception,System.Boolean)">
            <summary>
            Handles any error that has occured
            </summary>
            <param name="errorAction">The action that was attempted</param>
            <param name="errorMessage">The error message for the action</param>
            <param name="errorException">The exception that has occured</param>
            <param name="displayException">If the exception should be displayed</param>
        </member>
        <member name="M:TerminalEmulator.Program.Main2">
            <summary>
            The main function of terminal emulator
            </summary>
        </member>
    </members>
</doc>
